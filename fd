---
tags: [ search, find ]
---

# `fd` cheat

==Reference==
- Github https://github.com/sharkdp/fd
- fd 사용법 https://www.lesstif.com/lpt/linux-find-fd-119963793.html

- 현재 디렉토리 아래에 존재하는 파일 중에 md 파일을 제외하고 모두 md 확장자로 심볼링 링크 생성
$ fd . -t f -E "*.md" -x ln -s {/} {}.md
- *.md와 *.sh를 다 빼고 싶을 때는 더 써주면 된다.
$ fd . -t f -E "*.md" -E "*.sh" -x ln -s {/} {}.md

- md to org
fd -e md -x pandoc {} -o {.}.org

- xls 파일을 모두 csv 로 변환
fd -e xls -x ssconvert {} {.}.csv

- 현재-하위 디렉토리에 있는 모든 org 파일을 모두 md로 바꾸고자 할 때(with pandoc)
fd -e org -x pandoc -f org {} -t gfm -o {.}.md
** pandoc을 최신 버전을 사용하면 gfm 잘된다.

- 현재 폴더에 모든 org 파일에 뒤에 --journal을 붙여주고 싶다!
fd -e org -x mv {} {.}--journal.org

- 특정 파일을 찾고자 할 때
```
# -g는 --glob 옵션
> fd -g libc.so /usr
/usr/lib32/libc.so
/usr/lib/libc.so

# 숨김 파일을 검색할 때
> fd -g .gitmodules . -H
./spacemacs/robby-dot-spacemacs/.gitmodules
./vanilla/fuco1-dotfiles/.gitmodules

```

- 기본 검색
`netfl` 검색 패턴으로 적용
```
> fd netfl
Software/python/imdb-ratings/netflix-details.py
```

- 정규식 검색
x로 시작하고, rc로 끝나는 엔트리 검색
```
> cd /etc
> fd '^x.*rc$'
X11/xinit/xinitrc
X11/xinit/xserverrc
```

- 특정 디렉토리 안에서 찾을 때
/etc 아래에서 passwd 검색 패턴 적용
```
> fd passwd /etc
/etc/default/passwd
/etc/pam.d/passwd
/etc/passwd
```

- 특정 파일 extention 검색
```
# 현재 폴더에 md 파일 출력
fd . -e md

# 현재 폴더 중에 old 폴더의 md 파일 출력
fd . old -e md

# rs, mod를 한번에 조건으로 준다면
> fd -e rs mod
src/fshelper/mod.rs
src/lscolors/mod.rs
tests/testenv/mod.rs
```

- hidden 또는 ignored 파일 검색
```
> fd pre-commit
> fd -H pre-commit
.git/hooks/pre-commit.sample
```

- Full path가 맞아야 한다면
```
# fd는 기본적으로 filename 매칭만한다. full path를 따지려면 -p 옵션을 사용하라.
> fd -p -g '**/.git/config'
> fd -p '.*/lesson-\d+/[a-z]+.(jpg|png)'
```

- 찾고 바로 실행까지 한다면

```
# zip 파일 돌면서 싹 풀자
fd -e zip -x unzip

# .h, .cpp 파일에 clang-format 적용하고자 한다면
fd -e h -e cpp -x clang-format -i

# test_*.py 파일들을 vim으로 다 편집하고자 한다면
fd -g 'test_*.py' -X vim

# 모든 jpg 파일을 png로 바꾸고자 한다면
fd -e jpg -x convert {} {.}.png
## {} 검색 결과를 나타내는 placeholder,
## {.} 검색 결과에서 확장자 제거

- The -x/--exec option runs an external command for each of the search results (in parallel).
- The -X/--exec-batch option launches the external command once, with all search results as arguments.
```

- `ripgrep`과 함께 사용하는 시나리오
```
# cpp 소스 파일에서 특정 패턴을 찾고자 한다면
fd -e cpp -e cxx -e h -e hpp -X rg 'std::cout'

... 더 많이 있을 듯!

```

- Placeholder syntax
```
{}: A placeholder token that will be replaced with the path of the search result (documents/images/party.jpg).
{.}: Like {}, but without the file extension (documents/images/party).
{/}: A placeholder that will be replaced by the basename of the search result (party.jpg).
{//}: The parent of the discovered path (documents/images).
{/.}: The basename, with the extension removed (party).
```

- 특정 파일 또는 디렉토리를 제외
```
fd -H -E .git …
fd -E /mnt/driver ...
fd -E '*.bak' ...
```

- `.fdignore` 에 주목하라!
```
# .gitignore와 같은 기능을 한다.
> cat ~/.fdignore
/mnt/external-drive
*.bak
```

- `쓰레기` 파일들을 싹 지우고 싶을 때
```
fd -H '^\.DS_Store$' -tf -X rm

# 삭제가 쫄리면 -i 즉 interactive 로 실행
fd -H '^\.DS_Store$' -tf -X rm -i
```

- emacs 가 들어간 모든 파일 삭제
fd emacs -X sudo rm -Rf

- `.` 과 `^`의 차이가 무엇인가?
```
> fd . fd/tests/
testenv
testenv/mod.rs
tests.rs
```

- lndir-hardlink.sh
```
oldifs=$IFS
IFS='
'
[ $# -ne 2 ] && { echo "Usage: $0 sourceDirectory destinationDirectory" ; exit 1; }
[ ! -d "$1" ] && { echo "$1 is not a valid directory"; exit 1; }
[ ! -d "$2" ] && { mkdir -p "$2"; }
src=$(cd "$1" ; pwd)
dst=$(cd "$2" ; pwd)
fd . "$src" -t d |
  while read dir; do
    mkdir -p "$dst${dir#$src}"
  done

  fd . "$src" -e txt -e md -e org -e svg -e png -e jpg |
    while read src_f; do
      dst_f="$dst${src_f#$src}"
      ln "$src_f" "$dst_f"
    done
    IFS=$oldifs
```

- CLI Options
```
USAGE:
    fd [FLAGS/OPTIONS] [<pattern>] [<path>...]

FLAGS:
    -H, --hidden            Search hidden files and directories
    -I, --no-ignore         Do not respect .(git|fd)ignore files
    -s, --case-sensitive    Case-sensitive search (default: smart case)
    -i, --ignore-case       Case-insensitive search (default: smart case)
    -g, --glob              Glob-based search (default: regular expression)
    -a, --absolute-path     Show absolute instead of relative paths
    -l, --list-details      Use a long listing format with file metadata
    -L, --follow            Follow symbolic links
    -p, --full-path         Search full abs. path (default: filename only)
    -h, --help              Prints help information
    -V, --version           Prints version information

OPTIONS:
    -d, --max-depth <depth>            Set maximum search depth (default: none)
    -t, --type <filetype>...           Filter by type: file (f), directory (d), symlink (l),
                                       executable (x), empty (e), socket (s), pipe (p)
    -e, --extension <ext>...           Filter by file extension
    -x, --exec <cmd>                   Execute a command for each search result
    -X, --exec-batch <cmd>             Execute a command with all search results at once
    -E, --exclude <pattern>...         Exclude entries that match the given glob pattern
    -c, --color <when>                 When to use colors: never, *auto*, always
    -S, --size <size>...               Limit results based on the size of files
        --changed-within <date|dur>    Filter by file modification time (newer than)
        --changed-before <date|dur>    Filter by file modification time (older than)
    -o, --owner <user:group>           Filter by owning user and/or group

ARGS:
    <pattern>    the search pattern (a regular expression, unless '--glob' is used; optional)
    <path>...    the root directory for the filesystem search (optional)

```
